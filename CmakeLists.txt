cmake_minimum_required(VERSION 3.15)
project(imageconverter LANGUAGES C CXX)

# Disallow in-source builds
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "In-source builds are not allowed. Please create a separate 'build' directory and run CMake there (e.g. mkdir build && cd build && cmake ..).")
endif()


# Emscripten: enable threads, atomics  in all external builds
set(ENV{EMCC_CFLAGS}   "$ENV{EMCC_CFLAGS} -pthread -sUSE_PTHREADS=1 -sSHARED_MEMORY=1 ")
set(ENV{EMCC_CXXFLAGS} "$ENV{EMCC_CXXFLAGS} -pthread -sUSE_PTHREADS=1 -sSHARED_MEMORY=1 ")
set(ENV{EMCC_LDFLAGS}  "$ENV{EMCC_LDFLAGS} -pthread -sUSE_PTHREADS=1 ")

include(ExternalProject)
find_package(Git REQUIRED)

# Ensure AOM directory is clean at configure time to avoid stale state
if(EXISTS ${CMAKE_BINARY_DIR}/aom)
  file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/aom)
endif()

set(EXTERNAL_INSTALL_DIR ${CMAKE_BINARY_DIR}/external)
# Expose external libs to pkg-config and CMake find
set(ENV{PKG_CONFIG_PATH} "${EXTERNAL_INSTALL_DIR}/lib/pkgconfig")
list(APPEND CMAKE_PREFIX_PATH "${EXTERNAL_INSTALL_DIR}")

# Prepare AOM source at configure time
set(AOM_SRC_DIR "${CMAKE_BINARY_DIR}/aom.git")
if(EXISTS ${AOM_SRC_DIR})
  file(REMOVE_RECURSE ${AOM_SRC_DIR})
endif()
execute_process(
  COMMAND "${GIT_EXECUTABLE}" clone --branch v3.8.0 --depth=1 https://aomedia.googlesource.com/aom "${AOM_SRC_DIR}"
  RESULT_VARIABLE AOM_CLONE_RESULT
  OUTPUT_VARIABLE AOM_CLONE_OUTPUT
  ERROR_VARIABLE AOM_CLONE_ERROR
)
if(NOT AOM_CLONE_RESULT EQUAL 0)
  message(FATAL_ERROR "Failed to clone AOM: ${AOM_CLONE_ERROR}")
endif()

# Generate Meson cross-file for Emscripten
set(DAV1D_MESON_CROSS_FILE ${CMAKE_BINARY_DIR}/dav1d-cross.ini)
file(TO_CMAKE_PATH "${CMAKE_C_COMPILER}" EMCC_PATH)
file(TO_CMAKE_PATH "${CMAKE_CXX_COMPILER}" EMXX_PATH)
file(TO_CMAKE_PATH "${CMAKE_AR}" EMAR_PATH)
file(WRITE ${DAV1D_MESON_CROSS_FILE}
"[binaries]\n"
"c = '${EMCC_PATH}'\n"
"cpp = '${EMXX_PATH}'\n"
"ar = '${EMAR_PATH}'\n\n"
"[host_machine]\n"
"system = 'emscripten'\n"
"cpu_family = 'wasm32'\n"
"cpu = 'wasm32'\n"
"endian = 'little'\n"
"\n[properties]\n"
"c_args = ['-pthread','-sUSE_PTHREADS=1','-sSHARED_MEMORY=1']\n"
"cpp_args = ['-pthread','-sUSE_PTHREADS=1','-sSHARED_MEMORY=1',]\n"
"link_args = ['-pthread','-sUSE_PTHREADS=1','-sSHARED_MEMORY=1']\n"
)

# Build dav1d with Meson
ExternalProject_Add(dav1d
  GIT_REPOSITORY https://code.videolan.org/videolan/dav1d.git
  SOURCE_DIR ${CMAKE_BINARY_DIR}/dav1d/src
  BINARY_DIR ${CMAKE_BINARY_DIR}/dav1d/build
  CONFIGURE_COMMAND meson setup ${CMAKE_BINARY_DIR}/dav1d/build ${CMAKE_BINARY_DIR}/dav1d/src --cross-file=${DAV1D_MESON_CROSS_FILE} --prefix=${EXTERNAL_INSTALL_DIR} --default-library static --buildtype release
  BUILD_COMMAND meson compile -C ${CMAKE_BINARY_DIR}/dav1d/build
  INSTALL_COMMAND meson install -C ${CMAKE_BINARY_DIR}/dav1d/build
)

# Build SVT-AV1 with pthread support
ExternalProject_Add(svt_av1
  GIT_REPOSITORY https://gitlab.com/AOMediaCodec/SVT-AV1.git
  GIT_TAG v1.7.0
  PREFIX ${CMAKE_BINARY_DIR}/svt_av1
  INSTALL_DIR ${EXTERNAL_INSTALL_DIR}
  CMAKE_ARGS
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_INSTALL_PREFIX=${EXTERNAL_INSTALL_DIR}
    -DBUILD_SHARED_LIBS=OFF
    -DCMAKE_BUILD_TYPE=Release
    -DSVT_AV1_LIBPCI=OFF
    -DSVT_AV1_TESTS=OFF
    -DBUILD_APPS=OFF  # skip building Enc/Dec apps under Emscripten
    -DCMAKE_C_FLAGS=-pthread
    -DCMAKE_C_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_C_FLAGS=-sSHARED_MEMORY=1  
    -DCMAKE_CXX_FLAGS=-pthread
    -DCMAKE_CXX_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_CXX_FLAGS=-sSHARED_MEMORY=1    
    -DCMAKE_EXE_LINKER_FLAGS=-pthread
    -DCMAKE_EXE_LINKER_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_EXE_LINKER_FLAGS=-sSHARED_MEMORY=1
    -DEB_THREAD_SANITIZER_ENABLED=1
)


ExternalProject_Add(aom
  PREFIX ${CMAKE_BINARY_DIR}/aom
  DOWNLOAD_COMMAND ""  # Skip, already cloned
  UPDATE_COMMAND ""    # No update
  SOURCE_DIR ${AOM_SRC_DIR}
  BINARY_DIR ${CMAKE_BINARY_DIR}/aom/build
  INSTALL_DIR ${EXTERNAL_INSTALL_DIR}
  CMAKE_ARGS
    
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_INSTALL_PREFIX=${EXTERNAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=Release
    -DCONFIG_MULTITHREAD=0
    -DENABLE_DOCS=OFF
    -DENABLE_TESTS=OFF
    -DENABLE_TESTDATA=OFF
    -DENABLE_TOOLS=OFF
    -DENABLE_EXAMPLES=OFF
    -DENABLE_NASM=OFF
    -DAOM_TARGET_CPU=generic
    -DCONFIG_RUNTIME_CPU_DETECT=0
    -DCONFIG_REALTIME_ONLY=0
    -DCONFIG_WEBM_IO=0
    -DCONFIG_PIC=0
    -DCONFIG_AV1_HIGHBITDEPTH=0
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_C_FLAGS=-pthread
    -DCMAKE_C_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_C_FLAGS=-sSHARED_MEMORY=1   
    -DCMAKE_CXX_FLAGS=-pthread
    -DCMAKE_CXX_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_CXX_FLAGS=-sSHARED_MEMORY=1 
    -DCMAKE_EXE_LINKER_FLAGS=-pthread
    -DCMAKE_EXE_LINKER_FLAGS=-sUSE_PTHREADS=1
    -DCMAKE_EXE_LINKER_FLAGS=-sSHARED_MEMORY=1
)
# Build libavif with CMake
ExternalProject_Add(libavif
  GIT_REPOSITORY https://github.com/AOMediaCodec/libavif.git
  GIT_TAG main
  PREFIX ${CMAKE_BINARY_DIR}/libavif
  DEPENDS dav1d svt_av1 aom
  INSTALL_DIR ${EXTERNAL_INSTALL_DIR}
  CMAKE_ARGS
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_INSTALL_PREFIX=${EXTERNAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${EXTERNAL_INSTALL_DIR}
    -DAVIF_CODEC_DAV1D=SYSTEM  # Use system-installed dav1d
    -DAVIF_CODEC_SVT=SYSTEM     # Use system-installed SVT-AV1
    -DAVIF_CODEC_AOM=SYSTEM    # Use system-installed AOM
    -DAVIF_LOCAL_AOM=OFF       # Disable local AOM fetch
    -DAVIF_LIBYUV=LOCAL
    -DDAV1D_LIBRARY=${EXTERNAL_INSTALL_DIR}/lib/libdav1d.a
    -DDAV1D_INCLUDE_DIR=${EXTERNAL_INSTALL_DIR}/include
    -DSVT_LIBRARY=${EXTERNAL_INSTALL_DIR}/lib/libSvtAv1Enc.a
    -DSVT_INCLUDE_DIR=${EXTERNAL_INSTALL_DIR}/include
    -DAOM_LIBRARY=${EXTERNAL_INSTALL_DIR}/lib/libaom.a
    -DAOM_INCLUDE_DIR=${EXTERNAL_INSTALL_DIR}/include
    -DBUILD_SHARED_LIBS=OFF
    -DCMAKE_BUILD_TYPE=Release
)

# Configure Emscripten flags with pthread support
set(CMAKE_EXECUTABLE_SUFFIX ".html")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --no-wasm-opt --bind -fexceptions -sDISABLE_EXCEPTION_CATCHING=0 -sEXPORTED_RUNTIME_METHODS=ccall,cwrap,UTF8ToString,allocate,intArrayFromString,HEAPU8 -sALLOW_MEMORY_GROWTH=1 -sMODULARIZE=1 -sEXPORT_ES6=1 -pthread -sUSE_PTHREADS=1 -sSTACK_SIZE=16MB -sSHARED_MEMORY=1 -sINITIAL_MEMORY=1GB -sMAXIMUM_MEMORY=2GB ")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --no-wasm-opt --bind -sDISABLE_EXCEPTION_CATCHING=0 -pthread -sUSE_PTHREADS=1 -sPTHREAD_POOL_SIZE=navigator.hardwareConcurrency")

include(FetchContent)
FetchContent_Declare(
  stb
  GIT_REPOSITORY https://github.com/nothings/stb
  SOURCE_DIR ${CMAKE_SOURCE_DIR}/third_party/stb
)
FetchContent_MakeAvailable(stb)

include_directories(
  include
  ${stb_SOURCE_DIR}
  ${EXTERNAL_INSTALL_DIR}/include
)
link_directories(${EXTERNAL_INSTALL_DIR}/lib)


add_library(pthread_stubs STATIC ${CMAKE_SOURCE_DIR}/src/pthread_stubs.c)

add_library(dav1d_static STATIC IMPORTED)
add_library(aom_static STATIC IMPORTED)
set_target_properties(dav1d_static PROPERTIES
  IMPORTED_LOCATION "${EXTERNAL_INSTALL_DIR}/lib/libdav1d.a"
)
set_target_properties(aom_static PROPERTIES
  IMPORTED_LOCATION "${EXTERNAL_INSTALL_DIR}/lib/libaom.a"
)
add_library(avif_static STATIC IMPORTED)
set_target_properties(avif_static PROPERTIES
  IMPORTED_LOCATION "${EXTERNAL_INSTALL_DIR}/lib/libavif.a"
  INTERFACE_LINK_LIBRARIES dav1d_static
)

add_executable(imageconverter 
  src/imageconverter.cpp
  src/bind.cpp          
  src/error.cpp         
)
add_dependencies(imageconverter dav1d libavif svt_av1)

target_compile_definitions(imageconverter PRIVATE STB_IMAGE_IMPLEMENTATION STB_IMAGE_RESIZE_IMPLEMENTATION)
target_link_libraries(imageconverter PRIVATE pthread_stubs avif_static dav1d_static aom_static ${EXTERNAL_INSTALL_DIR}/lib/libSvtAv1Enc.a)

