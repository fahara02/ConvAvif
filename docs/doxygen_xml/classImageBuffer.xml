<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classImageBuffer" kind="class" language="C++" prot="public">
    <compoundname>ImageBuffer</compoundname>
    <includes refid="imagebuffer_8h" local="no">imagebuffer.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; ImageBuffer::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>ImageBuffer::data_</qualifiedname>
        <briefdescription>
<para>The binary image data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/imagebuffer.h" line="61" column="15" bodyfile="include/imagebuffer.h" bodystart="61" bodyend="-1"/>
        <referencedby refid="classImageBuffer_1a092d25f5f27ff06124cd28764bf091cb" compoundref="imagebuffer_8h" startline="40" endline="44">getData</referencedby>
        <referencedby refid="classImageBuffer_1a5c2bf3c39d985e8f25726764d4bd29f4" compoundref="imagebuffer_8h" startline="58" endline="58">getRawData</referencedby>
        <referencedby refid="classImageBuffer_1ab2fce31da3b99684f3621762e9230022" compoundref="imagebuffer_8h" startline="51" endline="51">getSize</referencedby>
        <referencedby refid="classImageBuffer_1ae35022dca7c053de97b73c9e55d7a6c0" compoundref="imagebuffer_8h" startline="31" endline="31">ImageBuffer</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classImageBuffer_1ae35022dca7c053de97b73c9e55d7a6c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ImageBuffer::ImageBuffer</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; data)</argsstring>
        <name>ImageBuffer</name>
        <qualifiedname>ImageBuffer::ImageBuffer</qualifiedname>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Constructor that takes ownership of image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the binary image data (typically AVIF encoded) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/imagebuffer.h" line="31" column="3" bodyfile="include/imagebuffer.h" bodystart="31" bodyend="31"/>
        <references refid="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" compoundref="imagebuffer_8h" startline="61">data_</references>
      </memberdef>
      <memberdef kind="function" id="classImageBuffer_1a092d25f5f27ff06124cd28764bf091cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>emscripten::val</type>
        <definition>emscripten::val ImageBuffer::getData</definition>
        <argsstring>() const</argsstring>
        <name>getData</name>
        <qualifiedname>ImageBuffer::getData</qualifiedname>
        <briefdescription>
<para>Get the image data as a JavaScript typed array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>JavaScript typed array (Uint8Array) view of the image data</para>
</simplesect>
<simplesect kind="note"><para>This creates a view into the existing memory without copying </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/imagebuffer.h" line="40" column="19" bodyfile="include/imagebuffer.h" bodystart="40" bodyend="44"/>
        <references refid="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" compoundref="imagebuffer_8h" startline="61">data_</references>
        <referencedby refid="bind_8cpp_1a1e4a4c27063f79b3f55a1b887e25c4ab" compoundref="bind_8cpp" startline="8" endline="14">EMSCRIPTEN_BINDINGS</referencedby>
      </memberdef>
      <memberdef kind="function" id="classImageBuffer_1ab2fce31da3b99684f3621762e9230022" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ImageBuffer::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <qualifiedname>ImageBuffer::getSize</qualifiedname>
        <briefdescription>
<para>Get the size of the image data in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of the image data in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/imagebuffer.h" line="51" column="10" bodyfile="include/imagebuffer.h" bodystart="51" bodyend="51"/>
        <references refid="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" compoundref="imagebuffer_8h" startline="61">data_</references>
        <referencedby refid="bind_8cpp_1a1e4a4c27063f79b3f55a1b887e25c4ab" compoundref="bind_8cpp" startline="8" endline="14">EMSCRIPTEN_BINDINGS</referencedby>
      </memberdef>
      <memberdef kind="function" id="classImageBuffer_1a5c2bf3c39d985e8f25726764d4bd29f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; uint8_t &gt; &amp;</type>
        <definition>const std::vector&lt; uint8_t &gt; &amp; ImageBuffer::getRawData</definition>
        <argsstring>() const</argsstring>
        <name>getRawData</name>
        <qualifiedname>ImageBuffer::getRawData</qualifiedname>
        <briefdescription>
<para>Get direct access to the underlying data vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the underlying byte vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/imagebuffer.h" line="58" column="21" bodyfile="include/imagebuffer.h" bodystart="58" bodyend="58"/>
        <references refid="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" compoundref="imagebuffer_8h" startline="61">data_</references>
        <referencedby refid="bind_8cpp_1a1e4a4c27063f79b3f55a1b887e25c4ab" compoundref="bind_8cpp" startline="8" endline="14">EMSCRIPTEN_BINDINGS</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Container class for image binary data. </para>
    </briefdescription>
    <detaileddescription>
<para>This class encapsulates a vector of bytes representing image data and provides methods to access this data from both C++ and JavaScript. </para>
    </detaileddescription>
    <location file="include/imagebuffer.h" line="24" column="1" bodyfile="include/imagebuffer.h" bodystart="24" bodyend="62"/>
    <listofallmembers>
      <member refid="classImageBuffer_1a63f6553c8908a439066d3e51b3897dc4" prot="private" virt="non-virtual"><scope>ImageBuffer</scope><name>data_</name></member>
      <member refid="classImageBuffer_1a092d25f5f27ff06124cd28764bf091cb" prot="public" virt="non-virtual"><scope>ImageBuffer</scope><name>getData</name></member>
      <member refid="classImageBuffer_1a5c2bf3c39d985e8f25726764d4bd29f4" prot="public" virt="non-virtual"><scope>ImageBuffer</scope><name>getRawData</name></member>
      <member refid="classImageBuffer_1ab2fce31da3b99684f3621762e9230022" prot="public" virt="non-virtual"><scope>ImageBuffer</scope><name>getSize</name></member>
      <member refid="classImageBuffer_1ae35022dca7c053de97b73c9e55d7a6c0" prot="public" virt="non-virtual"><scope>ImageBuffer</scope><name>ImageBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
